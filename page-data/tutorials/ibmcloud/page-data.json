{"componentChunkName":"component---src-pages-tutorials-ibmcloud-index-mdx","path":"/tutorials/ibmcloud/","result":{"pageContext":{"frontmatter":{"title":"Automating infrastructure in public clouds","description":null},"relativePagePath":"/tutorials/ibmcloud/index.mdx","titleType":"page","MdxNode":{"id":"b22d39c6-25e5-52ed-8508-d5e4a04fd40a","children":[],"parent":"708fbff7-b357-5e6b-a9e9-bddd20788a0a","internal":{"content":"---\ntitle: Automating infrastructure in public clouds\ndescription:\n---\n\n<FeatureCard title=\"Automating infrastructure in public clouds\" color=\"dark\">\n\n![banner](images/automate-banner.jpg)\n\n</FeatureCard>\n\n<AnchorLinks>\n  <AnchorLink>Lab Overview</AnchorLink>\n  <AnchorLink>Managing infrastructure in public clouds</AnchorLink>\n  <AnchorLink>Exploring the cloud providers</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n***\n\n## Lab Overview\n\nIBM Cloud Pak for Watson AIOps Infrastructure Management delivers the insight, control, and automation enterprises need to address challenges of managing hybrid cloud environments, which are far more complex than traditional data center. This technology enables enterprises with existing virtual infrastructures to improve visibility and control, and those just starting virtualization deployments to build and operate a well-managed virtual infrastructure.\n\nIBM Cloud Pak for Watson AIOps Infrastructure Management is based on upstream OSS project [ManageIQ](https://www.manageiq.org) and includes the following feature sets:\n\n- Insight: discovery, monitoring, utilization, performance, reporting, analytics, chargeback, and trending.\n- Control: security, compliance, alerting, policy-based resource and configuration management.\n- Automate: IT process, task, and event, provisioning, workload management and orchestration.\n- Integrate: systems management, tools and processes, event consoles, CMDB, RBA, and web services.\n\nIn this tutorial, you will explore the following key capabilities:\n\n- Understand Cloud Pak for Watson AIOps Infrastructure Automation capabilities for public clouds\n- Learn how to deploy a new service in a public cloud combaning Terraform and Ansible\n- Learn how to manage lifecycle of the service\n- Learn how to apply configuration and control policies to the managed VMs\n- Learn how Cloud Pak help SRE teams managing infrastructure in public clouds with full audit trail.\n\n***\n\n## Managing infrastructure in public clouds\n\n  There are multiple technologies available to provision and manage IT services and infrastructure in public clouds. Each of them has some advantages and there is no way one can fully replace the others. This creates a real challenge for enterprises: \"How to achieve consistency and traceability across all environments?\". IBM Cloud Pak for Watson AIOps - Infrastructure Automation helps integrate different tools and technologies in the closed-loop management cycle.\n\n  In the following exercise, you learn how to provision a new service in a public cloud using Terraform. You will extend the service (which initially provisions a single virtual machine) with the configuration management task driven by Ansible. Then, you will explore how tags are mapped to provide a consistent view of the resources across all infrastructure providers and how to apply the configuration policies to ensure configuration governance.\n\n### Exploring the cloud providers\n\n  Log in to the Cloud Pak user interface with your assigned user id (studentX). From the \"hamburger\" menu in the top-left corner select **Automate infrastructure -> Infrastructure management**\n\n  ![](images/2021-05-04-09-51-03.png)\n\n  New browser tab opens with Infrastructure management user interface. Here, depending on the assigned permissions you can view and manage virtual machines in any of the connected environments. Let's explore infrastructure in public clouds. From the left-hand side menu select **Compute -> Cloud -> Providers**\n\n  ![](images/2021-05-04-09-58-25.png)\n\n  You should see some public cloud regions from different public providers registered. Due to the fact, that this is a shared environment you cannot edit the providers, but you should know that IBM Cloud Pak for Watson AIOps Infrastructure Management currently supports the following clouds:\n\n  - Amazon EC2\n  - Google Cloud Engine\n  - IBM Cloud\n  - Microsoft Azure\n  - Microsoft Azure Stack\n  - Openstack\n  - VMware vCloud\n\n  ![](images/2021-05-04-10-23-45.png)\n\n  Additional providers are planned for second half of 2021\n\n  Click any of the available providers (for example IBM Cloud US-East - the list may vary). You will see details of all resources provisioned in selected region (to which you have access rights assigned). To explore further, click the **Instances**.\n\n  ![](images/2021-05-04-10-29-20.png)\n\n  If you cannot see any instances on the list, it means that your access rights are limited.\n  \n  ![](images/2021-05-04-13-54-33.png)\n\n  You can click any instance to look at the details.\n\n  ![](images/2021-05-04-13-56-23.png)\n\n  Let's provision some new instances in IBM Cloud.\n\n### Exploring the service library\n\n  Go back to the main browser tab **IBM Cloud Pak for ...**. This time from the \"hamburger\" menu select **Automate infrastructure -> Manage services**.\n\n  In case you access this module for the first time, \"Welcome\" screen may pop-up. If that happens, click the **Service library** link.\n\n  ![](images/2021-05-04-10-48-19.png)\n\n  In the Service Library view you can see all services defined in the Cloud Pak. On the left you can see different service categories (1), on the right list of all services in a selected category (2). On top, there are additional tabs, where you can define the terraform templates for your environment (3). This tab is explored more in VMware lab. Here you will work with the already defined service.\n\n  ![](images/2021-05-04-10-53-46.png)\n\n  Unfold versions of the **IBMCloud-Nginx-Lab** service (1), then click  **three dots** icon on the right in the **(default)** row (2), and select **View** (3).\n\n  ![](images/2021-10-07-12-24-27.png)\n\n  This view shows all the details of the service. Click the **Composition** tab to see the provisioning flow.\n\n  ![](images/2021-10-07-12-28-06.png)\n\n  You can see that service flow includes two tasks:\n  - a terraform template **ibmcloud-vpc-nginx-lab** (1), and\n  - Ansible inventory task (2)\n\n  ![](images/2021-10-07-12-33-15.png)\n\n  First task provisions a terraform template in IBM Cloud (To see the source code of the template click this [link](https://github.com/dymaczew/cmh-test-github/tree/master/terraform/ibmcloud-vpc-nginx-lab)) When it completes, the second one registers newly provisioned VMs in Ansible Tower inventory so you can run the configuration tasks against them. Let's add a new Ansible task to the flow to configure new virtual machine as web server running Nginx. Since the service is already published, to modify it you have to first create a new version. Go back to the **Service Library** view.\n\n  ![](images/2021-10-07-12-36-25.png)\n\n  In the row **IBMCloud-Nginx-Lab** click the **3 dots** icon on the right, and select **Add version**.\n\n  ![](images/2021-10-07-12-39-08.png)\n\n  Provide unique version name (1) - for example provide your student id number as a last field. Notice, that the version number must be in a format X.Y.Z.V. Finally, click **Add** (2).\n\n  ![](images/2021-05-04-11-49-28.png)\n\n  New version of the service is opened in Service editor. Go to the **Composition** tab (1), unfold the available Ansible tasks on the left (2) and drag-and-drop **Nginx Parametrized** task next to the Ansible inventory task in the flow (3). \n\n  ![](images/2021-10-07-12-43-46.png)\n\n  This is a very simple Ansible playbook available [here](https://github.com/dymaczew/rba-ansible-sample/blob/master/nginx_parametrized.yaml), which was imported into connected Ansible Tower and exposed as a Template (All templates  you create in connected Ansible Tower are automatically shown in the Service Editor). For covenience, the source code was also shown below:\n\n  ```yaml\n    ---\n    - name: Install nginx\n      hosts: all\n      gather_facts: False\n      become: true\n\n      vars:\n       - MyMessage: \"Welcome to Infrastructure Management Lab instance!\"\n\n      tasks:\n      - name: Add epel-release repo\n        yum:\n          name: epel-release\n          state: present\n\n      - name: Install nginx\n        yum:\n          name: nginx\n          state: present\n\n      - name: Insert Index Page\n        template:\n          src: index.html.j2\n          dest: /usr/share/nginx/html/index.html\n\n      - file:\n          path: /usr/share/nginx/html/index.html\n          mode: 0644\n\n      - name: Start NGiNX\n        service:\n          name: nginx\n          state: started\n  ```\n\n  Click the newly added task to edit parameters.\n\n  ![](images/2021-10-07-12-48-48.png)\n\n  There are three parameters available:\n\n  - inventory name\n  - credentials\n  - extra variables (to be passed to Ansible playbook)\n\n  Click **inventory_name** link (1) and then click **Link parameter** (2).\n\n  ![](images/2021-05-04-12-02-50.png)\n\n  Instead of providing the static value, you will link as input the output value from the previous **Ansible inventory** task. Pick **Ansible** (1) and unfold the **Inventory** task parameters (2).\n\n  ![](images/2021-05-04-12-07-56.png)\n\n  Scroll down and select **inventory_name (output)** (1). To create a linkage click the '+' sign next to the parameter name. Then, click **Save** (2).\n\n  ![](images/2021-05-04-12-11-18.png)\n\n  As a second required parameter **credential_name** provide the static value \"default-ssh-key\" and click **Save**. In our lab setup, each virtual machine is provisioned with SSH key embedded in a template, and Ansible Tower that is used for automating the configuration tasks, has a matching private key stored with this name. Alternatively, you could add **Ansible Credentials** task in the flow to create a credentials dynamically, but we wanted to simplify the flow for the time sake.\n\n  ![](images/2021-05-04-12-13-45.png)\n\n  Finally, we want to customize the Nginx default web page with personalized message. Ansible template contains variable MyMessage that can be overriden on runtime. To pass custom value click **extra_variables** (1) and then **Add**.\n\n  ![](images/2021-10-07-12-54-44.png)\n\n  In the newly open map field provide the following values:\n  \n  - Key field: **MyMessage** (1)\n  - Value field: **${input_parameters.message}** (2)\n  \n  Then click **Save** (3)\n\n  ![](images/2021-10-07-13-05-05.png)\n\n  The value field refers to the parameter name that you are just going to create to allow users to provide the value during service request. Click **Parameters** tab on top and then **Create parameter**.\n\n  ![](images/2021-10-07-13-09-57.png)\n\n  In the new dialong provide the `message` as **Parameter key** (1) and for example `Welcome message` as **Display name** (2). This will be the label for the field shown to the user. Finally click **Add** (3).\n\n  ![](images/2021-10-07-13-16-09.png)\n\n  When new parameter is defined, click the **Save** button on the top (1). Then, click \"three dots\" (2) icon next to Publish button and select **Test deploy** (3).\n\n  ![](images/2021-10-07-13-21-30.png)\n\n  Provisioning dialog opens. Click **Next**.\n\n  ![](images/2021-10-07-13-23-41.png)\n\n  Provide the required parameters. Select any **Namespace** (e.g. `default`) (1)- this is used for access control but we won't explore that in this exercise. For **Service instance name** (2) provide a unique name (for example your user id - this will help you identify your instance among all VMs provisioned by other students). You can change **Environment** type (3) - that will be dynamically mapped to the filters in the Infrastructure management UI. Provide the personalized **Welcome message** to be shown by Nginx server (4). Finally hit **Deploy** button (5).\n\n  ![](images/2021-10-07-14-53-00.png)\n\n  On the Order confirmation dialog select **Go to instances** to verify the provisioning process.\n\n  ![](images/2021-05-04-12-53-26.png)\n\n  Click the row with your service instance.\n\n  ![](images/2021-10-07-14-54-12.png)\n\n  You should see your tasks progressing. You can click **Log file** tab to see the detailed log from each activity.\n\n  ![](images/2021-10-07-14-55-13.png)\n\n  If everything works as expected, at the end of terraform provisioning log you should see the public IP of newly provisioned service.\n\n  ![](images/2021-10-07-15-01-34.png)\n\n  **NOTE:** If something goes wrong and you receive Error look through the logs to find the problem and ask Instructor for help. If you want to remove the failed instance of your service, first select **Terminate** to remove any provisioned resources and then select **Delete** from service instance actions.\n\n  If the service is **Active** (with green dot next to it), you can point a new browser tab to see if you can connect to your new service instance.\n\n  ![](images/2021-10-07-15-06-40.png)\n\n  Congratulations! You have just provisioned new service in public cloud with Terraform template and configured application service there (Nginx web server) with Ansible task.\n\n***\n\n## Summary\n\n  In this exercise you have modified the service definition to combine provisioning of infrastructure in public cloud using Terraform template with the configuration task leveraging Ansible playbook. \n\n\nTo continue other portions of the lab, select one of the lab exercises in the upper left corner or select one of the images below.\n\n\n<Row>\n\n<Column colLg={3} colMd={3} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    subTitle=\"Automation with VMware\"\n    title=\"Want to learn how to automate infrastructure management in VMWare vSphere?\"\n    href=\"/tutorials/vmware\"\n    actionIcon=\"arrowRight\"\n    >\n\n![](../../images/multi-cloud.jpg)\n\n</ArticleCard>\n\n</Column>\n\n\n<Column colLg={3} colMd={3} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    subTitle=\"Managing chargeback\"\n    title=\"Do you want to create and execute a chargeback report on the VM and container workloads?\"\n    href=\"/tutorials/Chargeback\"\n    actionIcon=\"arrowRight\"\n    >\n\n![](../../images/prereqs.jpg)\n\n</ArticleCard>\n</Column>\n\n</Row>\n","type":"Mdx","contentDigest":"be77c9f0fb59373c54814ed0fbcac9d1","owner":"gatsby-plugin-mdx","counter":261},"frontmatter":{"title":"Automating infrastructure in public clouds","description":null},"exports":{},"rawBody":"---\ntitle: Automating infrastructure in public clouds\ndescription:\n---\n\n<FeatureCard title=\"Automating infrastructure in public clouds\" color=\"dark\">\n\n![banner](images/automate-banner.jpg)\n\n</FeatureCard>\n\n<AnchorLinks>\n  <AnchorLink>Lab Overview</AnchorLink>\n  <AnchorLink>Managing infrastructure in public clouds</AnchorLink>\n  <AnchorLink>Exploring the cloud providers</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n***\n\n## Lab Overview\n\nIBM Cloud Pak for Watson AIOps Infrastructure Management delivers the insight, control, and automation enterprises need to address challenges of managing hybrid cloud environments, which are far more complex than traditional data center. This technology enables enterprises with existing virtual infrastructures to improve visibility and control, and those just starting virtualization deployments to build and operate a well-managed virtual infrastructure.\n\nIBM Cloud Pak for Watson AIOps Infrastructure Management is based on upstream OSS project [ManageIQ](https://www.manageiq.org) and includes the following feature sets:\n\n- Insight: discovery, monitoring, utilization, performance, reporting, analytics, chargeback, and trending.\n- Control: security, compliance, alerting, policy-based resource and configuration management.\n- Automate: IT process, task, and event, provisioning, workload management and orchestration.\n- Integrate: systems management, tools and processes, event consoles, CMDB, RBA, and web services.\n\nIn this tutorial, you will explore the following key capabilities:\n\n- Understand Cloud Pak for Watson AIOps Infrastructure Automation capabilities for public clouds\n- Learn how to deploy a new service in a public cloud combaning Terraform and Ansible\n- Learn how to manage lifecycle of the service\n- Learn how to apply configuration and control policies to the managed VMs\n- Learn how Cloud Pak help SRE teams managing infrastructure in public clouds with full audit trail.\n\n***\n\n## Managing infrastructure in public clouds\n\n  There are multiple technologies available to provision and manage IT services and infrastructure in public clouds. Each of them has some advantages and there is no way one can fully replace the others. This creates a real challenge for enterprises: \"How to achieve consistency and traceability across all environments?\". IBM Cloud Pak for Watson AIOps - Infrastructure Automation helps integrate different tools and technologies in the closed-loop management cycle.\n\n  In the following exercise, you learn how to provision a new service in a public cloud using Terraform. You will extend the service (which initially provisions a single virtual machine) with the configuration management task driven by Ansible. Then, you will explore how tags are mapped to provide a consistent view of the resources across all infrastructure providers and how to apply the configuration policies to ensure configuration governance.\n\n### Exploring the cloud providers\n\n  Log in to the Cloud Pak user interface with your assigned user id (studentX). From the \"hamburger\" menu in the top-left corner select **Automate infrastructure -> Infrastructure management**\n\n  ![](images/2021-05-04-09-51-03.png)\n\n  New browser tab opens with Infrastructure management user interface. Here, depending on the assigned permissions you can view and manage virtual machines in any of the connected environments. Let's explore infrastructure in public clouds. From the left-hand side menu select **Compute -> Cloud -> Providers**\n\n  ![](images/2021-05-04-09-58-25.png)\n\n  You should see some public cloud regions from different public providers registered. Due to the fact, that this is a shared environment you cannot edit the providers, but you should know that IBM Cloud Pak for Watson AIOps Infrastructure Management currently supports the following clouds:\n\n  - Amazon EC2\n  - Google Cloud Engine\n  - IBM Cloud\n  - Microsoft Azure\n  - Microsoft Azure Stack\n  - Openstack\n  - VMware vCloud\n\n  ![](images/2021-05-04-10-23-45.png)\n\n  Additional providers are planned for second half of 2021\n\n  Click any of the available providers (for example IBM Cloud US-East - the list may vary). You will see details of all resources provisioned in selected region (to which you have access rights assigned). To explore further, click the **Instances**.\n\n  ![](images/2021-05-04-10-29-20.png)\n\n  If you cannot see any instances on the list, it means that your access rights are limited.\n  \n  ![](images/2021-05-04-13-54-33.png)\n\n  You can click any instance to look at the details.\n\n  ![](images/2021-05-04-13-56-23.png)\n\n  Let's provision some new instances in IBM Cloud.\n\n### Exploring the service library\n\n  Go back to the main browser tab **IBM Cloud Pak for ...**. This time from the \"hamburger\" menu select **Automate infrastructure -> Manage services**.\n\n  In case you access this module for the first time, \"Welcome\" screen may pop-up. If that happens, click the **Service library** link.\n\n  ![](images/2021-05-04-10-48-19.png)\n\n  In the Service Library view you can see all services defined in the Cloud Pak. On the left you can see different service categories (1), on the right list of all services in a selected category (2). On top, there are additional tabs, where you can define the terraform templates for your environment (3). This tab is explored more in VMware lab. Here you will work with the already defined service.\n\n  ![](images/2021-05-04-10-53-46.png)\n\n  Unfold versions of the **IBMCloud-Nginx-Lab** service (1), then click  **three dots** icon on the right in the **(default)** row (2), and select **View** (3).\n\n  ![](images/2021-10-07-12-24-27.png)\n\n  This view shows all the details of the service. Click the **Composition** tab to see the provisioning flow.\n\n  ![](images/2021-10-07-12-28-06.png)\n\n  You can see that service flow includes two tasks:\n  - a terraform template **ibmcloud-vpc-nginx-lab** (1), and\n  - Ansible inventory task (2)\n\n  ![](images/2021-10-07-12-33-15.png)\n\n  First task provisions a terraform template in IBM Cloud (To see the source code of the template click this [link](https://github.com/dymaczew/cmh-test-github/tree/master/terraform/ibmcloud-vpc-nginx-lab)) When it completes, the second one registers newly provisioned VMs in Ansible Tower inventory so you can run the configuration tasks against them. Let's add a new Ansible task to the flow to configure new virtual machine as web server running Nginx. Since the service is already published, to modify it you have to first create a new version. Go back to the **Service Library** view.\n\n  ![](images/2021-10-07-12-36-25.png)\n\n  In the row **IBMCloud-Nginx-Lab** click the **3 dots** icon on the right, and select **Add version**.\n\n  ![](images/2021-10-07-12-39-08.png)\n\n  Provide unique version name (1) - for example provide your student id number as a last field. Notice, that the version number must be in a format X.Y.Z.V. Finally, click **Add** (2).\n\n  ![](images/2021-05-04-11-49-28.png)\n\n  New version of the service is opened in Service editor. Go to the **Composition** tab (1), unfold the available Ansible tasks on the left (2) and drag-and-drop **Nginx Parametrized** task next to the Ansible inventory task in the flow (3). \n\n  ![](images/2021-10-07-12-43-46.png)\n\n  This is a very simple Ansible playbook available [here](https://github.com/dymaczew/rba-ansible-sample/blob/master/nginx_parametrized.yaml), which was imported into connected Ansible Tower and exposed as a Template (All templates  you create in connected Ansible Tower are automatically shown in the Service Editor). For covenience, the source code was also shown below:\n\n  ```yaml\n    ---\n    - name: Install nginx\n      hosts: all\n      gather_facts: False\n      become: true\n\n      vars:\n       - MyMessage: \"Welcome to Infrastructure Management Lab instance!\"\n\n      tasks:\n      - name: Add epel-release repo\n        yum:\n          name: epel-release\n          state: present\n\n      - name: Install nginx\n        yum:\n          name: nginx\n          state: present\n\n      - name: Insert Index Page\n        template:\n          src: index.html.j2\n          dest: /usr/share/nginx/html/index.html\n\n      - file:\n          path: /usr/share/nginx/html/index.html\n          mode: 0644\n\n      - name: Start NGiNX\n        service:\n          name: nginx\n          state: started\n  ```\n\n  Click the newly added task to edit parameters.\n\n  ![](images/2021-10-07-12-48-48.png)\n\n  There are three parameters available:\n\n  - inventory name\n  - credentials\n  - extra variables (to be passed to Ansible playbook)\n\n  Click **inventory_name** link (1) and then click **Link parameter** (2).\n\n  ![](images/2021-05-04-12-02-50.png)\n\n  Instead of providing the static value, you will link as input the output value from the previous **Ansible inventory** task. Pick **Ansible** (1) and unfold the **Inventory** task parameters (2).\n\n  ![](images/2021-05-04-12-07-56.png)\n\n  Scroll down and select **inventory_name (output)** (1). To create a linkage click the '+' sign next to the parameter name. Then, click **Save** (2).\n\n  ![](images/2021-05-04-12-11-18.png)\n\n  As a second required parameter **credential_name** provide the static value \"default-ssh-key\" and click **Save**. In our lab setup, each virtual machine is provisioned with SSH key embedded in a template, and Ansible Tower that is used for automating the configuration tasks, has a matching private key stored with this name. Alternatively, you could add **Ansible Credentials** task in the flow to create a credentials dynamically, but we wanted to simplify the flow for the time sake.\n\n  ![](images/2021-05-04-12-13-45.png)\n\n  Finally, we want to customize the Nginx default web page with personalized message. Ansible template contains variable MyMessage that can be overriden on runtime. To pass custom value click **extra_variables** (1) and then **Add**.\n\n  ![](images/2021-10-07-12-54-44.png)\n\n  In the newly open map field provide the following values:\n  \n  - Key field: **MyMessage** (1)\n  - Value field: **${input_parameters.message}** (2)\n  \n  Then click **Save** (3)\n\n  ![](images/2021-10-07-13-05-05.png)\n\n  The value field refers to the parameter name that you are just going to create to allow users to provide the value during service request. Click **Parameters** tab on top and then **Create parameter**.\n\n  ![](images/2021-10-07-13-09-57.png)\n\n  In the new dialong provide the `message` as **Parameter key** (1) and for example `Welcome message` as **Display name** (2). This will be the label for the field shown to the user. Finally click **Add** (3).\n\n  ![](images/2021-10-07-13-16-09.png)\n\n  When new parameter is defined, click the **Save** button on the top (1). Then, click \"three dots\" (2) icon next to Publish button and select **Test deploy** (3).\n\n  ![](images/2021-10-07-13-21-30.png)\n\n  Provisioning dialog opens. Click **Next**.\n\n  ![](images/2021-10-07-13-23-41.png)\n\n  Provide the required parameters. Select any **Namespace** (e.g. `default`) (1)- this is used for access control but we won't explore that in this exercise. For **Service instance name** (2) provide a unique name (for example your user id - this will help you identify your instance among all VMs provisioned by other students). You can change **Environment** type (3) - that will be dynamically mapped to the filters in the Infrastructure management UI. Provide the personalized **Welcome message** to be shown by Nginx server (4). Finally hit **Deploy** button (5).\n\n  ![](images/2021-10-07-14-53-00.png)\n\n  On the Order confirmation dialog select **Go to instances** to verify the provisioning process.\n\n  ![](images/2021-05-04-12-53-26.png)\n\n  Click the row with your service instance.\n\n  ![](images/2021-10-07-14-54-12.png)\n\n  You should see your tasks progressing. You can click **Log file** tab to see the detailed log from each activity.\n\n  ![](images/2021-10-07-14-55-13.png)\n\n  If everything works as expected, at the end of terraform provisioning log you should see the public IP of newly provisioned service.\n\n  ![](images/2021-10-07-15-01-34.png)\n\n  **NOTE:** If something goes wrong and you receive Error look through the logs to find the problem and ask Instructor for help. If you want to remove the failed instance of your service, first select **Terminate** to remove any provisioned resources and then select **Delete** from service instance actions.\n\n  If the service is **Active** (with green dot next to it), you can point a new browser tab to see if you can connect to your new service instance.\n\n  ![](images/2021-10-07-15-06-40.png)\n\n  Congratulations! You have just provisioned new service in public cloud with Terraform template and configured application service there (Nginx web server) with Ansible task.\n\n***\n\n## Summary\n\n  In this exercise you have modified the service definition to combine provisioning of infrastructure in public cloud using Terraform template with the configuration task leveraging Ansible playbook. \n\n\nTo continue other portions of the lab, select one of the lab exercises in the upper left corner or select one of the images below.\n\n\n<Row>\n\n<Column colLg={3} colMd={3} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    subTitle=\"Automation with VMware\"\n    title=\"Want to learn how to automate infrastructure management in VMWare vSphere?\"\n    href=\"/tutorials/vmware\"\n    actionIcon=\"arrowRight\"\n    >\n\n![](../../images/multi-cloud.jpg)\n\n</ArticleCard>\n\n</Column>\n\n\n<Column colLg={3} colMd={3} noGutterMdLeft>\n<ArticleCard\n    color=\"dark\"\n    subTitle=\"Managing chargeback\"\n    title=\"Do you want to create and execute a chargeback report on the VM and container workloads?\"\n    href=\"/tutorials/Chargeback\"\n    actionIcon=\"arrowRight\"\n    >\n\n![](../../images/prereqs.jpg)\n\n</ArticleCard>\n</Column>\n\n</Row>\n","fileAbsolutePath":"/Users/bstern/tivoli/Best_Practices/InfrastructureManagementLab/src/pages/tutorials/ibmcloud/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}